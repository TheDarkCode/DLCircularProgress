{
  "name": "Dlcircularprogress",
  "tagline": "A circular progress view with gradients written in Swift",
  "body": "# KDCircularProgress\r\n`KDCircularProgress` is a circular progress view written in Swift. It makes it possible to have gradients in the progress view, along with glows and animations. \r\n\r\nKDCircularProgress also has `IBInspectable` and `IBDesignable` support, so you can configure and preview inside the `Interface Builder`. \r\n\r\nHere's an example\r\n\r\n[Youtube Link](http://youtu.be/iIdas72MXOg)\r\n\r\n\r\n![Screenshot](https://raw.githubusercontent.com/kaandedeoglu/KDCircularProgress/master/screenshot.gif)\r\n\r\n![Screenshot](https://raw.githubusercontent.com/kaandedeoglu/KDCircularProgress/master/screenshot.png)\r\n![Screenshot](https://raw.githubusercontent.com/kaandedeoglu/KDCircularProgress/master/screenshot2.jpg)\r\n![Screenshot](https://raw.githubusercontent.com/kaandedeoglu/KDCircularProgress/master/screenshot3.jpg)\r\n![Screenshot](https://raw.githubusercontent.com/kaandedeoglu/KDCircularProgress/master/screenshot4.jpg)\r\n![Screenshot](https://raw.githubusercontent.com/kaandedeoglu/KDCircularProgress/master/screenshot5.jpg)\r\n![Screenshot](https://raw.githubusercontent.com/kaandedeoglu/KDCircularProgress/master/screenshot6.jpg)\r\n![Screenshot](https://raw.githubusercontent.com/kaandedeoglu/KDCircularProgress/master/screenshot7.jpg)\r\n\r\n```swift\r\nlet progress = KDCircularProgress(frame: CGRect(x: 0, y: 0, width: 300, height: 300))\r\nprogress.startAngle = -90\r\nprogress.progressThickness = 0.2\r\nprogress.trackThickness = 0.7\r\nprogress.clockwise = true\r\nprogress.center = view.center\r\nprogress.gradientRotateSpeed = 2\r\nprogress.roundedCorners = true\r\nprogress.glowMode = .Forward\r\nprogress.angle = 300\r\nprogress.setColors(UIColor.cyanColor() ,UIColor.whiteColor(), UIColor.magentaColor())\r\nview.addSubview(progress)\r\n```\r\n\r\n## Installation\r\n- It's on CocoaPods under the name (you guessed it!) KDCircularProgress\r\n- Just drag `KDCircularProgress.swift` into your project. `Carthage` support is on To-do list.\r\n\r\n## Properties\r\n\r\n####progressColors: `[UIColor]`\r\nThe colors used to generate the gradient of the progress. You can also set this using the variadic `setColors(UIColor...)` method. A gradient is used only if there is more than one color. A fill is used otherwise. The default is a white fill.\r\n\r\n####angle: `Int`\r\nThe angle of the progress. Between 0 and 360 (inclusive). Simply change its value in order to change the visual progress of the component. Default is 0.\r\n\r\n####startAngle: `Int`\r\nThe angle at which the progress will begin. Between 0 and 360 (inclusive), however you can pass any negative or positive values and the component will mod them automatically to the required range. Default is 0.\r\n\r\n####clockwise: `Bool`\r\nClockwise if true, Counter-clockwise if false. Default is true.\r\n\r\n####roundedCorners: `Bool`\r\nWhen true, the ends of the progress track will be drawn with a half circle radius. Default is false.\r\n\r\n####gradientRotateSpeed: `CGFloat`\r\nDescribes how many times the underlying gradient will perform a 2Ï€ rotation for each full cycle of the progress. Integer values recommended. Default is 0.\r\n\r\n####glowAmount: `CGFloat`\r\nThe intensity of the glow. Between 0 and 1.0. Default is 1.0.\r\n\r\n####glowMode: `KDCircularProgressGlowMode`\r\n- **.Forward** - The glow increases proportionaly to the angle. No glow at 0 degrees and full glow at 360 degrees.\r\n\r\n- **.Reverse** - The glow increases inversely proportional to the angle. Full glow at 0 degrees and no glow at 360 degrees.\r\n\r\n- **.Constant** - Constant glow.\r\n\r\n- **.NoGlow** - No glow\r\n\r\nThe default is **.Forward**\r\n\r\n####progressThickness: `CGFloat`\r\nThe thickness of the progress. Between 0 and 1. Default is 0.4\r\n\r\n####trackThickness: `CGFloat`\r\nThe thickness of the background track. Between 0 and 1. Default is 0.5\r\n\r\n####trackColor: `UIColor`\r\nThe color of the background track. Default is `UIColor.blackColor()`.\r\n\r\n####progressInsideFillColor: `UIColor`\r\nThe color of the center of the circle. Default is `UIColor.clearColor()`.\r\n\r\n##Methods\r\n```swift \r\noverride public init(frame: CGRect)\r\n```\r\nInitialize with a frame. Please only use square frames.\r\n\r\n```swift \r\nconvenience public init(frame:CGRect, colors: UIColor...)\r\n```\r\nInitialize with a frame and the gradient colors.\r\n\r\n```swift \r\npublic func setColors(colors: UIColor...)\r\n```\r\n\r\nSet the colors for the progress gradient.\r\n\r\n```swift\r\npublic func animateFromAngle(fromAngle: Int, toAngle: Int, duration: NSTimeInterval, relativeDuration: Bool = true, completion: ((Bool) -> Void)?)\r\n```\r\n\r\nAnimate the progress from an initial value to a final value, with a completion block that fires after the animation is done.\r\n\r\n`relativeDuration` - specify if the duration is for the specific animation or is the duration that would make a full turn.\r\n\r\n```swift\r\npublic func animateToAngle(toAngle: Int, duration: NSTimeInterval, completion: ((Bool) -> Void)?)\r\n```\r\n\r\nAnimate the progress from the current state to a target value.\r\n\r\n```swift \r\npublic func pauseAnimation()\r\n```\r\n\r\nPause the animation, if any.\r\n\r\n```swift \r\npublic func isAnimating() -> Bool\r\n```\r\n\r\nCheck if there's an active animation.\r\n\r\n##Misc\r\nPrefering light colors in the gradients gives better results. As mentioned before, use square frames. Rectangular frames are not tested and might produce unexpected results.\r\n\r\n##To-Do\r\n- [x] Add example project\r\n- [ ] Carthage Support\r\n- [x] CocoaPods Support\r\n- [x] IBDesignable/IBInspectable support\r\n- [ ] Adding a `progress` property as an alternative to `angle`\r\n- [ ] Clean up\r\n\r\n##Contact\r\nDrop me an email if you want discuss anything further.\r\n\r\n[Email](kaandedeoglu@me.com)\r\n\r\n##License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Kaan Dedeoglu\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}